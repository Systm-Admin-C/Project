#include <stdio.h>
#include <string.h>

#define MAX_TASKS 10
#define TASK_LENGTH 100

typedef struct {
    char task[TASK_LENGTH];
} Task;

Task todoList[MAX_TASKS];
int taskCount = 0;

void addTask() {
    if (taskCount < MAX_TASKS) {
        printf("Enter the task: ");
        getchar();
        fgets(todoList[taskCount].task, TASK_LENGTH, stdin);
        todoList[taskCount].task[strcspn(todoList[taskCount].task, "\n")] = '\0';
        taskCount++;
        printf("Task added successfully!\n");
    } else {
        printf("Error: To-Do list is full!\n");
    }
}

void removeTask() {
    int taskNumber;
    printf("Enter the task number to remove: ");
    scanf("%d", &taskNumber);

    if (taskNumber < 1 || taskNumber > taskCount) {
        printf("Error: Invalid task number!\n");
        return;
    }

    for (int i = taskNumber - 1; i < taskCount - 1; i++) {
        strcpy(todoList[i].task, todoList[i + 1].task);
    }
    taskCount--;
    printf("Task removed successfully!\n");
}

void viewTasks() {
    if (taskCount == 0) {
        printf("No tasks to display!\n");
    } else {
        printf("\nYour To-Do List:\n");
        for (int i = 0; i < taskCount; i++) {
            printf("%d. %s\n", i + 1, todoList[i].task);
        }
    }
}

void menu() {
    printf("\n--- To-Do List Menu ---\n");
    printf("1. Add Task\n");
    printf("2. Remove Task\n");
    printf("3. View Tasks\n");
    printf("4. Exit\n");
}

int main() {
    int choice;
    while (1) {
        menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                removeTask();
                break;
            case 3:
                viewTasks();
                break;
            case 4:
                printf("Exiting the To-Do List Application.\n");
                return 0;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}

